// ‚úÖ Ï†ÑÏó≠ÏúºÎ°ú ÏÑ†Ïñ∏Îêú Ìï®Ïàò: Ï§ëÎ≥µ Î∞©ÏßÄÎ•º ÏúÑÌï¥ Ïù¥Î≤§Ìä∏ Î¶¨Ïä§ÎÑàÏôÄ ÎèôÏùºÌïú Ìï®Ïàò Ï∞∏Ï°∞ Ïú†ÏßÄ
function addHabit() {
    let habitName = document.getElementById("habitInput").value.trim();

    if (habitName === "") {
        alert("ÏäµÍ¥Ä Ïù¥Î¶ÑÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî!");
        return;
    }

    console.log("üìå ÏÑúÎ≤ÑÎ°ú Ï†ÑÏÜ°Ìï† Îç∞Ïù¥ÌÑ∞:", { habitName });

    fetch("/habit/addNewHabit", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ habit_name: habitName }) // ‚úÖ snake_caseÎ°ú Ï†ÑÏÜ°
    })
        .then(response => response.json())
        .then(data => {
            console.log("‚úÖ ÏÑúÎ≤Ñ ÏùëÎãµ:", data);

            if (data.status === "success") {
                alert("ÏäµÍ¥ÄÏù¥ ÏÑ±Í≥µÏ†ÅÏúºÎ°ú Ï∂îÍ∞ÄÎêòÏóàÏäµÎãàÎã§.");
                location.reload(); // ‚úÖ ÏÉàÎ°úÍ≥†Ïπ®
            } else {
                alert("ÏäµÍ¥Ä Ï∂îÍ∞Ä Ïã§Ìå®: " + data.message);
            }
        })
        .catch(error => {
            console.error("‚ùå ÏÑúÎ≤Ñ ÏöîÏ≤≠ Ïã§Ìå®:", error);
            alert("ÏÑúÎ≤Ñ Ïò§Î•ò Î∞úÏÉù. Îã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî.");
        });
}

document.addEventListener("DOMContentLoaded", function () {
    console.log("üìå JavaScript Î°úÎìú ÏôÑÎ£å!");

    // ‚úÖ addHabitBtn ÌÅ¥Î¶≠ Î¶¨Ïä§ÎÑà Îì±Î°ù
    function addClickListener() {
        let addHabitBtn = document.getElementById("addHabitBtn");

        if (addHabitBtn) {
            addHabitBtn.removeEventListener("click", addHabit); // ‚úÖ Ïù¥Ï†Ñ Î¶¨Ïä§ÎÑà Ï†úÍ±∞
            addHabitBtn.addEventListener("click", addHabit);    // ‚úÖ ÏÉàÎ°úÏö¥ Î¶¨Ïä§ÎÑà Îì±Î°ù
        } else {
            console.error("‚ùå [ERROR] addHabitBtn Î≤ÑÌäºÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.");
        }
    }

    addClickListener(); // ‚úÖ ÌéòÏù¥ÏßÄ Î°úÎìúÏãú Ï¥àÍ∏∞ Îì±Î°ù

    // ‚úÖ ÎèôÏ†Å ÏöîÏÜå Î≥ÄÌôî Í∞êÏßÄ
    let observer = new MutationObserver(function (mutations) {
        mutations.forEach(function (mutation) {
            if (mutation.addedNodes.length) {
                addClickListener(); // ‚úÖ ÏÉàÎ°ú Ï∂îÍ∞ÄÎêú Î≤ÑÌäºÏóêÎèÑ Î¶¨Ïä§ÎÑà Îì±Î°ù
            }
        });
    });

    observer.observe(document.body, { childList: true, subtree: true });

    // ‚úÖ Í∏∞Î≥∏ ÌÉ≠ ÏÑ§Ï†ï
    function habitShowTab(tab) {
        const allTabs = document.querySelectorAll('.habit-content');
        const allTabButtons = document.querySelectorAll('.habit-tab');

        allTabs.forEach(tabContent => tabContent.classList.add('habit-hidden'));
        allTabButtons.forEach(button => button.classList.remove('habit-active'));

        document.getElementById('habit-' + tab).classList.remove('habit-hidden');
        document.getElementById('habit-tab-' + tab).classList.add('habit-active');
    }

    habitShowTab('Ïã†Ï≤¥Í±¥Í∞ï');

    // ‚úÖ ÏäµÍ¥Ä Ï∂îÏ≤ú ÌÅ¥Î¶≠ ‚Üí Ï∂îÍ∞Ä
    const habitItems = document.querySelectorAll('.habit-recommend p');
    habitItems.forEach(item => {
        item.addEventListener('click', function () {
            const habitName = item.innerText;
            addHabitToDatabase(habitName);
        });
    });

    function addHabitToDatabase(habitName) {
        const userId = 'current_user_id'; // ÌïÑÏöî Ïãú ÏÑ∏ÏÖò Ïó∞Îèô

        const requestData = {
            userId: userId,
            habitName: habitName
        };

        fetch('/habit/add', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(requestData)
        })
            .then(response => response.json())
            .then(data => {
                if (data) {
                    updateHabitList(data);
                } else {
                    alert('ÏäµÍ¥Ä Ï∂îÍ∞Ä Ïã§Ìå®');
                }
            })
            .catch(error => console.error('Error:', error));
    }

    function updateHabitList(habit) {
        const habitList = document.querySelector('.myhabit-list');
        const newHabitDiv = document.createElement('div');
        newHabitDiv.id = `habit-${habit.habit_id}`;
        newHabitDiv.innerHTML = `
            <input type="checkbox" id="habit-${habit.habit_id}" />
            <label for="habit-${habit.habit_id}">${habit.habit_name}</label>
            <button class="delete-btn" onclick="deleteHabit(${habit.habit_id})">ÏÇ≠Ï†ú</button>
        `;
        habitList.appendChild(newHabitDiv);
    }

    // ‚úÖ Îã¨Î†• Í∏∞Îä•
    let selectedDate = null;
    let currentMonth = new Date().getMonth();
    let currentYear = new Date().getFullYear();

    function generateCalendar(month, year) {
        let calendarBody = document.getElementById("calendarBody");
        calendarBody.innerHTML = "";

        let monthYear = document.getElementById("monthYear");
        monthYear.textContent = `${year}ÎÖÑ ${month + 1}Ïõî`;

        let firstDay = new Date(year, month, 1).getDay();
        let daysInMonth = new Date(year, month + 1, 0).getDate();

        for (let i = 0; i < firstDay; i++) {
            let emptyCell = document.createElement("div");
            calendarBody.appendChild(emptyCell);
        }

        for (let day = 1; day <= daysInMonth; day++) {
            let dateCell = document.createElement("div");
            dateCell.classList.add("calendar-day");
            dateCell.textContent = day;
            dateCell.dataset.date = `${year}-${(month + 1).toString().padStart(2, "0")}-${day.toString().padStart(2, "0")}`;

            dateCell.addEventListener("click", function () {
                document.querySelectorAll(".calendar-day").forEach(cell => cell.classList.remove("selected"));
                this.classList.add("selected");
                selectedDate = this.dataset.date;
                document.getElementById("selectedDateDisplay").innerText = `ÏÑ†ÌÉùÌïú ÎÇ†Ïßú: ${selectedDate}`;
                console.log("‚úÖ ÏÑ†ÌÉùÎêú ÎÇ†Ïßú:", selectedDate);
            });

            calendarBody.appendChild(dateCell);
        }
    }

    document.getElementById("prevMonth").addEventListener("click", function () {
        currentMonth--;
        if (currentMonth < 0) {
            currentMonth = 11;
            currentYear--;
        }
        generateCalendar(currentMonth, currentYear);
    });

    document.getElementById("nextMonth").addEventListener("click", function () {
        currentMonth++;
        if (currentMonth > 11) {
            currentMonth = 0;
            currentYear++;
        }
        generateCalendar(currentMonth, currentYear);
    });

    generateCalendar(currentMonth, currentYear);
});
